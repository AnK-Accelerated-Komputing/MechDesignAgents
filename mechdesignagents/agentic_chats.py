from autogen import GroupChat, GroupChatManager
from agents import *
import re
import sys
import os
sys.path.append(os.path.abspath(os.path.join(os.path.dirname(__file__), '..')))
from utils.stl_path_finder import stl_path_finder
from autogen.agentchat.contrib.capabilities.vision_capability import VisionCapability

def chat_cad_coder(prompt: str):
    '''Chat with cad_coder agent.'''
    reset_agents()
    User = UserProxyAgent(
    name="User",
    is_termination_msg=termination_msg,
    human_input_mode="Never", # Use ALWAYS for human in the loop
    max_consecutive_auto_reply=1, #Change it to limit the number of replies from this agent
    #here we define the coding configuration for executing the code generated by agent 
    code_execution_config= {
        "work_dir": "NewCADs",
        "use_docker": False,
    },
    # llm_config={"config_list": config_list}, #you can also select a particular model from the config list here for llm
    system_message=""" A human designer who asks questions to create CAD models using CadQuery. You execute
    the python code written by CAD code writer. Terminate after successful cad model creation """,
    description= "The designer who asks questions to create CAD models using CadQuery",
    )
    User.reset()
    cad_coder.reset()
    response= User.initiate_chat(cad_coder, message=prompt)
    output= response.chat_history
    return stl_path_finder(output)


def multimodal_designers_chat(design_problem: str):
    """
    Creates a group chat environment for collaborative design problem solving.

    Args:
        design_problem (str): The design problem to be discussed.

    Required Agents:
        - designer
        - designer_expert
        - cad_coder
        - executor
        - reviewer
        - cad_reviewer

    Configuration:
        - max_round: 50
        - speaker_selection: round_robin
        - allow_repeat_speaker: False

    Example:
        >>> designers_chat("Design a water bottle")
    """
    # Replace image file paths with <img image_path>
    design_problem = re.sub(r'(\S+\.(?:jpg|jpeg|png|gif|bmp))', r'<img \1>', design_problem, flags=re.IGNORECASE)
    reset_agents()
    groupchat = GroupChat(
        # agents=[User,designer_expert,cad_coder, executor, reviewer,cad_data_reviewer],
        agents=[User,designer_expert,cad_coder, executor, reviewer],

        messages=[],
        max_round=50,
        # speaker_selection_method="round_robin",
        speaker_selection_method="auto",
        allow_repeat_speaker=False,
        func_call_filter=True,
        select_speaker_auto_verbose=False,
        send_introductions= True, 
    )
    vision_capability = VisionCapability(lmm_config=llm_config)
    group_chat_manager = GroupChatManager(groupchat=groupchat, llm_config=llm_config)
    vision_capability.add_to_agent(group_chat_manager)

    rst = User.initiate_chat(
        group_chat_manager,
        message=design_problem,
    )
    output= rst.chat_history
    return stl_path_finder(output)


def designers_rag_chat(design_problem: str):
    """
    Creates a group chat environment for collaborative design problem solving.

    Args:
        design_problem (str): The design problem to be discussed.

    Required Agents:
        - designer
        - designer_expert
        - cad_coder
        - executor
        - reviewer

    Configuration:
        - max_round: 50
        - speaker_selection: round_robin
        - allow_repeat_speaker: False

    Example:
        >>> designers_chat("Design a water bottle")
    """
    reset_agents()
    groupchat = GroupChat(
        agents=[User,cad_coder_assistant,designer_expert,cad_coder, executor, reviewer],
        messages=[],
        max_round=50,
        speaker_selection_method="round_robin",
        # speaker_selection_method="auto",
        allow_repeat_speaker=False,
        func_call_filter=True,
        select_speaker_auto_verbose=False,
        send_introductions= True, 
    )
    manager = GroupChatManager(groupchat=groupchat, llm_config=llm_config)
    response=User.initiate_chat(
        manager,
        message=design_problem,
    )
    output= response.chat_history
    return stl_path_finder(output)

def designers_chat(design_problem: str):
    """
    Creates a group chat environment for collaborative design problem solving.

    Args:
        design_problem (str): The design problem to be discussed.

    Required Agents:
        - designer
        - designer_expert
        - cad_coder
        - executor
        - reviewer

    Configuration:
        - max_round: 50
        - speaker_selection: round_robin
        - allow_repeat_speaker: False

    Example:
        >>> designers_chat("Design a water bottle")
    """
    reset_agents()
    groupchat = GroupChat(
        agents=[User,designer_expert,cad_coder, executor, reviewer],
        messages=[],
        max_round=50,
        # speaker_selection_method="round_robin",
        speaker_selection_method="auto",
        allow_repeat_speaker=False,
        func_call_filter=True,
        select_speaker_auto_verbose=False,
        send_introductions= True, 
    )
    manager = GroupChatManager(groupchat=groupchat, llm_config=llm_config)

    # Start chatting with the designer as this is the user proxy agent.
    response=User.initiate_chat(
        manager,
        message=design_problem,
    )
    output= response.chat_history
    return stl_path_finder(output)


def rag_chat(design_problem : str):
    reset_agents()
    groupchat = GroupChat(
        agents=[designer_aid, cad_coder,executor, reviewer], messages=[], max_round=12, speaker_selection_method="round_robin"
    )
    manager = GroupChatManager(groupchat=groupchat, llm_config=llm_config)

    # Start chatting with designer_aid as this is the user proxy agent.
    response= User.initiate_chat(
        manager,
        message=design_problem,
    )
    output= response.chat_history
    return stl_path_finder(output)

def norag_chat(design_prblem: str):
    reset_agents()
    groupchat = GroupChat(
        agents=[User, cad_coder, reviewer,],
        messages=[],
        max_round=12,
        speaker_selection_method="round_robin",
        allow_repeat_speaker=False,
    )
    manager = GroupChatManager(groupchat=groupchat, llm_config=llm_config)

    # Start chatting with the designer as this is the user proxy agent.
    response= User.initiate_chat(
        manager,
        message=design_prblem,
    )
    output= response.chat_history
    return stl_path_finder(output)
